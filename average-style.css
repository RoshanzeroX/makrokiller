<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</title>
  <link rel="stylesheet" href="style.css" />
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Kanit&family=Sarabun&display=swap');

    /* ‡∏û‡∏≤‡∏£‡πå‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏¥‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á */
    body::before {
      content: '';
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background: url('particles.webp');
      background-size: cover;
      opacity: 0.3;
      z-index: -2;
      animation: floatParticles 60s linear infinite;
    }

    @keyframes floatParticles {
      0% { transform: translateY(0); }
      100% { transform: translateY(-100px); }
    }

    .background {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-image: url('bg.webp');
      background-size: cover;
      background-position: center;
      filter: brightness(0.4) blur(5px);
      z-index: -1;
    }

    .content-wrapper {
      max-width: 900px;
      margin: auto;
      padding: 1em 1.5em;
      font-family: 'Kanit', 'Sarabun', 'Noto Sans Thai', sans-serif;
      text-align: center;
      position: relative;
      z-index: 1;
      color: #222;
    }

    /* ‚úÖ fade-in slide-in ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î */
    .fade-slide-in {
      opacity: 0;
      transform: translateY(30px);
      transition: opacity 0.6s ease-out, transform 0.6s ease-out;
    }
    .fade-slide-in.visible {
      opacity: 1;
      transform: translateY(0);
    }

    .title-no-wrap {
      white-space: nowrap;
      font-size: 2em;
      margin-bottom: 0.5em;
    }

    .result-container {
      margin-top: 2em;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    /* ‚úÖ bounce-in animation */
    @keyframes bounceIn {
      0% { transform: scale(0.5); opacity: 0; }
      60% { transform: scale(1.1); opacity: 1; }
      80% { transform: scale(0.95); }
      100% { transform: scale(1); }
    }

    .result-container img,
    .result-text-and-average {
      animation: bounceIn 0.8s ease-out;
    }

    .result-container img {
      max-width: 140px;
      height: auto;
      margin-bottom: 1em;
    }

    .result-text-and-average {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      align-items: baseline;
      gap: 1em;
      font-weight: 600;
      font-size: 2.2rem;
      max-width: 90vw;
      word-break: break-word;
      color: #222;
    }

    .average-value {
      font-weight: 900;
      font-size: 3rem;
      user-select: text;
    }

    @media (max-width: 768px) {
      .content-wrapper {
        color: #b3d4ff;
      }
      .result-text-and-average {
        font-size: 2rem;
        color: #b3d4ff;
      }
      .average-value {
        font-size: 2.5rem;
        color: #b3d4ff;
      }
    }

    .floating-button {
      position: fixed;
      bottom: 15px;
      background-color: #3A86FF;
      border: none;
      color: white;
      font-size: 2em;
      cursor: pointer;
      border-radius: 50%;
      width: 56px;
      height: 56px;
      box-shadow: 0 3px 6px rgba(0,0,0,0.2);
      transition: transform 0.2s ease;
      user-select: none;
      z-index: 1000;
      animation: floatUpDown 3s ease-in-out infinite;
    }

    .floating-button:hover {
      transform: translateY(-6px);
    }

    .floating-button.right {
      right: 15px;
    }

    .floating-button.left {
      left: 15px;
    }

    @keyframes floatUpDown {
      0%, 100% {
        transform: translateY(0);
      }
      50% {
        transform: translateY(-10px);
      }
    }
  </style>
</head>
<body>
  <div class="background"></div>

  <div class="content-wrapper fade-slide-in">
    <h1 class="title-no-wrap">‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h1>
    <div id="result-container" class="result-container"></div>
  </div>

  <button id="homeButton" class="floating-button left" title="‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å">üè†</button>
  <button id="fullscreenButton" class="floating-button right" title="‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠">‚õ∂</button>

  <script>
    document.addEventListener("DOMContentLoaded", async () => {
      const urlParams = new URLSearchParams(window.location.search);
      const avg = Number(urlParams.get("average"));

      const resultContainer = document.getElementById("result-container");
      const homeButton = document.getElementById("homeButton");
      const fullscreenButton = document.getElementById("fullscreenButton");

      function randomImageAndText() {
        const images = [
          { img: "1 (4).png", text: "‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡πÄ‡∏•‡∏¢!" },
          { img: "1 (3).png", text: "‡∏¢‡∏≠‡∏î‡∏°‡∏≤‡∏Å!" },
          { img: "1 (5).png", text: "‡∏î‡∏µ‡∏ï‡πà‡∏≠‡πÉ‡∏à" },
          { img: "1 (6).png", text: "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°!" },
          { img: "1 (7).png", text: "‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÑ‡∏ß‡πâ‡∏ô‡∏∞" },
          { img: "1 (8).png", text: "‡πÄ‡∏ó‡∏û‡∏à‡∏±‡∏î" },
          { img: "1 (9).png", text: "‡πÇ‡∏Ñ‡∏ï‡∏£‡πÄ‡∏ó‡πà‡πÄ‡∏•‡∏¢" },
        ];
        return images[Math.floor(Math.random() * images.length)];
      }

      function showResult() {
        let imgSrc = "";
        let text = "";

        if (avg > 12) {
          const result = randomImageAndText();
          imgSrc = result.img;
          text = result.text;
        } else {
          imgSrc = "1 (1).png";
          text = "‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ô‡∏∞";
        }

        resultContainer.innerHTML = `
          <img src="${imgSrc}" alt="‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå" />
          <div class="result-text-and-average">
            <div class="result-text">${text}</div>
            <div class="average-value">‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${avg.toFixed(2)}</div>
          </div>
        `;
      }

      showResult();

      homeButton.addEventListener("click", () => {
        if (window.history.length > 1) {
          window.history.back();
        } else {
          window.location.href = "index.html";
        }
      });

      async function toggleFullscreen() {
        try {
          if (!document.fullscreenElement) {
            await document.documentElement.requestFullscreen();

            const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
            if (isMobile && screen.orientation && screen.orientation.lock) {
              await screen.orientation.lock('landscape');
              window.addEventListener('resize', () => {
                if (window.innerHeight > window.innerWidth) {
                  screen.orientation.lock('landscape').catch(() => {});
                }
              });
            }
          } else {
            await document.exitFullscreen();
          }
        } catch (err) {
          console.warn("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà/‡∏≠‡∏≠‡∏Å fullscreen ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏ô‡∏ß‡πÑ‡∏î‡πâ:", err);
        }
      }

      if (fullscreenButton) {
        fullscreenButton.addEventListener("click", toggleFullscreen);
      }

      const fadeElements = document.querySelectorAll('.fade-slide-in');
      fadeElements.forEach(el => {
        el.classList.add('visible');
      });
    });
  </script>
</body>
</html>
